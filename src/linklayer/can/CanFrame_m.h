//
// Generated file, do not edit! Created by opp_msgc 4.2 from linklayer/can/CanFrame.msg.
//

#ifndef _CANFRAME_M_H_
#define _CANFRAME_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "Can.h"
// }}



/**
 * Enum generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * enum CanTrafficType
 * {
 * 	CAN_MESSAGE = 0x00;
 * 	CAN_SEND_REQUEST = 0x01;
 * 	CAN_SEND_PERMIT = 0x02;
 * 	CAN_ARBITRATION_FINISH = 0x03;
 * 	CAN_MESSAGES = 0x04;
 * }
 * </pre>
 */
enum CanTrafficType {
    CAN_MESSAGE = 0x00,
    CAN_SEND_REQUEST = 0x01,
    CAN_SEND_PERMIT = 0x02,
    CAN_ARBITRATION_FINISH = 0x03,
    CAN_MESSAGES = 0x04
};

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanTraffic
 * {
 *     short type enum(CanTrafficType);
 * }
 * </pre>
 */
class INET_API CanTraffic : public ::cPacket
{
  protected:
    short type_var;

  private:
    void copy(const CanTraffic& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanTraffic&);

  public:
    CanTraffic(const char *name=NULL, int kind=0);
    CanTraffic(const CanTraffic& other);
    virtual ~CanTraffic();
    CanTraffic& operator=(const CanTraffic& other);
    virtual CanTraffic *dup() const {return new CanTraffic(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getType() const;
    virtual void setType(short type);
};

inline void doPacking(cCommBuffer *b, CanTraffic& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanTraffic& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanFrame extends CanTraffic
 * {
 * 	  int MessageID;
 * 	  int Data;
 *       int frameByteLength;
 * }
 * </pre>
 */
class INET_API CanFrame : public ::CanTraffic
{
  protected:
    int MessageID_var;
    int Data_var;
    int frameByteLength_var;

  private:
    void copy(const CanFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanFrame&);

  public:
    CanFrame(const char *name=NULL, int kind=0);
    CanFrame(const CanFrame& other);
    virtual ~CanFrame();
    CanFrame& operator=(const CanFrame& other);
    virtual CanFrame *dup() const {return new CanFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageID() const;
    virtual void setMessageID(int MessageID);
    virtual int getData() const;
    virtual void setData(int Data);
    virtual int getFrameByteLength() const;
    virtual void setFrameByteLength(int frameByteLength);
};

inline void doPacking(cCommBuffer *b, CanFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanSendRequest extends CanTraffic
 * {
 * 	  int requestMessageID = 0;
 * }
 * </pre>
 */
class INET_API CanSendRequest : public ::CanTraffic
{
  protected:
    int requestMessageID_var;

  private:
    void copy(const CanSendRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanSendRequest&);

  public:
    CanSendRequest(const char *name=NULL, int kind=0);
    CanSendRequest(const CanSendRequest& other);
    virtual ~CanSendRequest();
    CanSendRequest& operator=(const CanSendRequest& other);
    virtual CanSendRequest *dup() const {return new CanSendRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getRequestMessageID() const;
    virtual void setRequestMessageID(int requestMessageID);
};

inline void doPacking(cCommBuffer *b, CanSendRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanSendRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanSendPermit extends CanTraffic
 * {
 * }
 * </pre>
 */
class INET_API CanSendPermit : public ::CanTraffic
{
  protected:

  private:
    void copy(const CanSendPermit& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanSendPermit&);

  public:
    CanSendPermit(const char *name=NULL, int kind=0);
    CanSendPermit(const CanSendPermit& other);
    virtual ~CanSendPermit();
    CanSendPermit& operator=(const CanSendPermit& other);
    virtual CanSendPermit *dup() const {return new CanSendPermit(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, CanSendPermit& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanSendPermit& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanArbitrationFinish extends CanTraffic
 * {
 * }
 * </pre>
 */
class INET_API CanArbitrationFinish : public ::CanTraffic
{
  protected:

  private:
    void copy(const CanArbitrationFinish& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanArbitrationFinish&);

  public:
    CanArbitrationFinish(const char *name=NULL, int kind=0);
    CanArbitrationFinish(const CanArbitrationFinish& other);
    virtual ~CanArbitrationFinish();
    CanArbitrationFinish& operator=(const CanArbitrationFinish& other);
    virtual CanArbitrationFinish *dup() const {return new CanArbitrationFinish(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, CanArbitrationFinish& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanArbitrationFinish& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>linklayer/can/CanFrame.msg</tt> by opp_msgc.
 * <pre>
 * packet CanFrames extends CanFrame
 * {
 * }
 * </pre>
 */
class INET_API CanFrames : public ::CanFrame
{
  protected:

  private:
    void copy(const CanFrames& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CanFrames&);

  public:
    CanFrames(const char *name=NULL, int kind=0);
    CanFrames(const CanFrames& other);
    virtual ~CanFrames();
    CanFrames& operator=(const CanFrames& other);
    virtual CanFrames *dup() const {return new CanFrames(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, CanFrames& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CanFrames& obj) {obj.parsimUnpack(b);}


#endif // _CANFRAME_M_H_
